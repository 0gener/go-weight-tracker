// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package weighttracker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WeightTrackerClient is the client API for WeightTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeightTrackerClient interface {
	// Creates a weight record. Returns `INVALID_ARGUMENT` if weight is less or equals to 0.
	// If weight_at is not sent, will use current datetime.
	CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error)
	// Reads a record using a record_id. Returns `NOT_FOUND` if the record does not exist.
	ReadRecord(ctx context.Context, in *ReadRecordRequest, opts ...grpc.CallOption) (*ReadRecordResponse, error)
	// Updates a record. Returns `NOT_FOUND` if the record does not exist.
	UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*UpdateRecordResponse, error)
	// Deletes a record using a record_id. Returns `NOT_FOUND` if the record does not exist.
	DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*DeleteRecordResponse, error)
}

type weightTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewWeightTrackerClient(cc grpc.ClientConnInterface) WeightTrackerClient {
	return &weightTrackerClient{cc}
}

func (c *weightTrackerClient) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error) {
	out := new(CreateRecordResponse)
	err := c.cc.Invoke(ctx, "/WeightTracker/CreateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weightTrackerClient) ReadRecord(ctx context.Context, in *ReadRecordRequest, opts ...grpc.CallOption) (*ReadRecordResponse, error) {
	out := new(ReadRecordResponse)
	err := c.cc.Invoke(ctx, "/WeightTracker/ReadRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weightTrackerClient) UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*UpdateRecordResponse, error) {
	out := new(UpdateRecordResponse)
	err := c.cc.Invoke(ctx, "/WeightTracker/UpdateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weightTrackerClient) DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*DeleteRecordResponse, error) {
	out := new(DeleteRecordResponse)
	err := c.cc.Invoke(ctx, "/WeightTracker/DeleteRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeightTrackerServer is the server API for WeightTracker service.
// All implementations must embed UnimplementedWeightTrackerServer
// for forward compatibility
type WeightTrackerServer interface {
	// Creates a weight record. Returns `INVALID_ARGUMENT` if weight is less or equals to 0.
	// If weight_at is not sent, will use current datetime.
	CreateRecord(context.Context, *CreateRecordRequest) (*CreateRecordResponse, error)
	// Reads a record using a record_id. Returns `NOT_FOUND` if the record does not exist.
	ReadRecord(context.Context, *ReadRecordRequest) (*ReadRecordResponse, error)
	// Updates a record. Returns `NOT_FOUND` if the record does not exist.
	UpdateRecord(context.Context, *UpdateRecordRequest) (*UpdateRecordResponse, error)
	// Deletes a record using a record_id. Returns `NOT_FOUND` if the record does not exist.
	DeleteRecord(context.Context, *DeleteRecordRequest) (*DeleteRecordResponse, error)
	mustEmbedUnimplementedWeightTrackerServer()
}

// UnimplementedWeightTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedWeightTrackerServer struct {
}

func (UnimplementedWeightTrackerServer) CreateRecord(context.Context, *CreateRecordRequest) (*CreateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (UnimplementedWeightTrackerServer) ReadRecord(context.Context, *ReadRecordRequest) (*ReadRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRecord not implemented")
}
func (UnimplementedWeightTrackerServer) UpdateRecord(context.Context, *UpdateRecordRequest) (*UpdateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecord not implemented")
}
func (UnimplementedWeightTrackerServer) DeleteRecord(context.Context, *DeleteRecordRequest) (*DeleteRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (UnimplementedWeightTrackerServer) mustEmbedUnimplementedWeightTrackerServer() {}

// UnsafeWeightTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeightTrackerServer will
// result in compilation errors.
type UnsafeWeightTrackerServer interface {
	mustEmbedUnimplementedWeightTrackerServer()
}

func RegisterWeightTrackerServer(s grpc.ServiceRegistrar, srv WeightTrackerServer) {
	s.RegisterService(&_WeightTracker_serviceDesc, srv)
}

func _WeightTracker_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeightTrackerServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeightTracker/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeightTrackerServer).CreateRecord(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeightTracker_ReadRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeightTrackerServer).ReadRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeightTracker/ReadRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeightTrackerServer).ReadRecord(ctx, req.(*ReadRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeightTracker_UpdateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeightTrackerServer).UpdateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeightTracker/UpdateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeightTrackerServer).UpdateRecord(ctx, req.(*UpdateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeightTracker_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeightTrackerServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeightTracker/DeleteRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeightTrackerServer).DeleteRecord(ctx, req.(*DeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WeightTracker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WeightTracker",
	HandlerType: (*WeightTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecord",
			Handler:    _WeightTracker_CreateRecord_Handler,
		},
		{
			MethodName: "ReadRecord",
			Handler:    _WeightTracker_ReadRecord_Handler,
		},
		{
			MethodName: "UpdateRecord",
			Handler:    _WeightTracker_UpdateRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _WeightTracker_DeleteRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weighttracker/weight_tracker.proto",
}
